---
- name: Safe Comet - Starting playbook for configuring OORT Panel
  ansible.builtin.debug:
    msg: Safe Comet - Starting playbook for configuring OORT Panel on {{ inventory_hostname }}

- name: Print inventory_hostname
  ansible.builtin.debug:
    msg: "{{ inventory_hostname }}"

- name: Only for development purpose - Add records to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: ^{{ item['value'] }} {{ item['key'] }}$
    line: "{{ item['value'] }} {{ item['key'] }}"
  loop: "{{ dev_hosts_overrides | dict2items }}"
  when: dev_etc_hosts | bool

- name: Installing podman
  package:
    name: "podman"
    state: present

- name: Create data dir
  ansible.builtin.file:
    path: /containers_vols
    state: directory
    mode: '0755'

- name: Create Prometheus data dir
  ansible.builtin.file:
    path: /containers_vols/prometheus/data
    state: directory
    owner: "{{ prometheus_id }}"
    group: "{{ prometheus_id }}"
    mode: '0755'

- name: Create Prometheus config dir
  ansible.builtin.file:
    path: /containers_vols/prometheus/config
    state: directory
    owner: "{{ prometheus_id }}"
    group: "{{ prometheus_id }}"
    mode: '0755'

- name: Copy Prometheus configuration
  ansible.builtin.template:
    src: templates/prometheus.yml.j2
    dest: /containers_vols/prometheus/config/prometheus.yml
    owner: "{{ prometheus_id }}"
    group: "{{ prometheus_id }}"
    mode: '0755'

- name: Create Hashicorp Vault data dir
  ansible.builtin.file:
    path: /containers_vols/vault/data
    state: directory
    owner: "{{ vault_id }}"
    group: "{{ vault_id }}"
    mode: '0755'

- name: Create Hashicorp Vault config dir
  ansible.builtin.file:
    path: /containers_vols/vault/config
    state: directory
    owner: "{{ vault_id }}"
    group: "{{ vault_id }}"
    mode: '0755'

- name: Create Hashicorp Vault certs dir
  ansible.builtin.file:
    path: /containers_vols/vault/certs
    state: directory
    owner: "{{ vault_id }}"
    group: "{{ vault_id }}"
    mode: '0755'

- name: Copy Hashicorp Vault TLS certificate
  ansible.builtin.copy:
    src: certs/safecomet.local.crt
    dest: /containers_vols/vault/certs/safecomet.local.crt
    owner: "{{ vault_id }}"
    group: "{{ vault_id }}"
    mode: '0600'

- name: Copy Hashicorp Vault TLS key
  ansible.builtin.copy:
    src: certs/safecomet.local.key
    dest: /containers_vols/vault/certs/safecomet.local.key
    owner: "{{ vault_id }}"
    group: "{{ vault_id }}"
    mode: '0600'

- name: Copy Hashicorp Vault configuration
  ansible.builtin.template:
    src: templates/vault.hcl.j2
    dest: /containers_vols/vault/config/vault.hcl
    owner: "{{ vault_id }}"
    group: "{{ vault_id }}"
    mode: '0755'

- name: Create Grafana config dir
  ansible.builtin.file:
    path: /containers_vols/grafana/config
    state: directory
    owner: "{{ grafana_id }}"
    group: "{{ grafana_id }}"
    mode: '0755'

- name: Create Grafana data dir
  ansible.builtin.file:
    path: /containers_vols/grafana/data
    state: directory
    owner: "{{ grafana_id }}"
    group: "{{ grafana_id }}"
    mode: '0755'

- name: Create Grafana log dir
  ansible.builtin.file:
    path: /containers_vols/grafana/logs
    state: directory
    mode: '0755'

- name: Copy Grafana configuration
  ansible.builtin.template:
    src: templates/grafana.ini.j2
    dest: /containers_vols/grafana/config/grafana.ini
    owner: "{{ grafana_id }}"
    group: "{{ grafana_id }}"
    mode: '0755'

- name: Copy Grafana default configuration
  ansible.builtin.template:
    src: templates/defaults.ini.j2
    dest: /containers_vols/grafana/config/defaults.ini
    owner: "{{ grafana_id }}"
    group: "{{ grafana_id }}"
    mode: '0755'

- name: Create HaProxy config dir
  ansible.builtin.file:
    path: /containers_vols/haproxy/config
    state: directory
    owner: "{{ haproxy_id }}"
    group: "{{ haproxy_id }}"
    mode: '0700'

- name: Create HaProxy certs dir
  ansible.builtin.file:
    path: /containers_vols/haproxy/config/certs
    state: directory
    owner: "{{ haproxy_id }}"
    group: "{{ haproxy_id }}"
    mode: '0700'

- name: Copy HaProxy TLS cert bundle
  ansible.builtin.copy:
    src: certs/safecomet_bundle.pem
    dest: /containers_vols/haproxy/config/certs/safecomet_bundle.pem
    owner: "{{ haproxy_id }}"
    group: "{{ haproxy_id }}"
    mode: '0700'

- name: Copy HaProxy configuration (template)
  ansible.builtin.template:
    src: templates/haproxy.cfg.j2
    dest: /containers_vols/haproxy/config/haproxy.cfg
    owner: "{{ haproxy_id }}"
    group: "{{ haproxy_id }}"
    mode: '0700'

- name: Create HaProxy Container
  containers.podman.podman_container:
    name: haproxy
    image: haproxy:{{ haproxy_tag }}
    volume:
      - /containers_vols/haproxy/config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:z
      - /containers_vols/haproxy/config/certs/safecomet_bundle.pem:/usr/local/etc/haproxy/certs/safecomet_bundle.pem:z
    expose:
      - 443
    ports:
      - "443:8443"

- name: Create Hashicorp Vault Container
  containers.podman.podman_container:
    name: vault
    image: vault:{{ vault_tag }}
    command: vault server -config /etc/vault/vault.hcl
    privileged: true
    expose:
      - 8200
    ports:
      - "8200:8200"
    volume:
      - /containers_vols/vault/config/vault.hcl:/etc/vault/vault.hcl:z
      - /containers_vols/vault/certs:/etc/vault/certs:z
      - /containers_vols/vault/data:/data:z

- name: Create Grafana Container
  containers.podman.podman_container:
    name: grafana
    image: grafana/grafana:{{ grafana_tag }}
    volume:
      - /containers_vols/grafana/config/grafana.ini:/etc/grafana/grafana.ini:z
      - /containers_vols/grafana/config/defaults.ini:/usr/share/grafana/conf/defaults.ini:z
      - /containers_vols/grafana/data:/var/lib/grafana:z
      - /containers_vols/grafana/logs:/var/log/grafana:z
    expose:
      - 3000
    ports:
      - "3000:3000"

- name: Create Prometheus Container
  containers.podman.podman_container:
    name: prometheus
    image: prom/prometheus:{{ prometheus_tag }}
    volume:
      - /containers_vols/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:z
      - /containers_vols/prometheus/data:/prometheus:z
    expose:
      - 9090
    ports:
      - "9090:9090"

- name: Check if Vault is initialized
  ansible.builtin.shell: podman exec -it vault sh -c 'VAULT_SKIP_VERIFY=true vault status' | grep Initialized | awk '{ print $2}'
  register: vault_initialized
  ignore_errors: true

- name: Print result of Vault initialization check
  ansible.builtin.debug:
    msg: "{{ vault_initialized.stdout }}"

- name: Trigger controlled error when Vault is not initialized
  ansible.builtin.fail:
    msg: Please initialize Hashicorp Vault (vault operator init..) and run again Ansible
  when: vault_initialized.stdout == "false"

- name: Check if kv engine exists
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/sys/mounts/{{ vault_engine_name }}/tune"
    method: GET
    body_format: json
    status_code: [200, 400, 503]
    return_content: true
    validate_certs: "{{ vault_validate_certs }}"
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ vault_token }}"
  register: kv_check

- name: Trigger controlled error when Vault is not working correctly or sealed
  ansible.builtin.fail:
    msg: The last http request to Vault returns 503. Please check if it is sealed
  when: kv_check.status == 503

- name: Create kv engine
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/sys/mounts/{{ vault_engine_name }}"
    method: POST
    body_format: json
    status_code: [204]
    return_content: true
    validate_certs: "{{ vault_validate_certs }}"
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ vault_token }}"
    body: { "type": "kv" }
  when: kv_check.status == 400

- name: List of fencing mechanisms to put in Vault
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ fencing | dict2items }}"

- name: List of fencing mechanisms to put in Vault
  ansible.builtin.debug:
    msg: "{{ item['key'] }} {{ item['value'] }}"
  loop: "{{ fencing | dict2items }}"

- name: Put fencing mechanism in Vault
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/{{ vault_engine_name }}/data/fencing/{{ item['key'] }}"
    method: POST
    body_format: json
    status_code: [200, 202, 204]
    return_content: true
    validate_certs: "{{ vault_validate_certs }}"
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ vault_token }}"
    body: { "data": { "base64code": "{{ item['value']}}" }}
  loop: "{{ fencing | dict2items }}"

- name: List of sfcomet roles to put in Vault
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ roles }}"

- name: Put sfcomet roles in Vault
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/{{ vault_engine_name }}/data/roles/{{ item.name }}"
    method: POST
    body_format: json
    status_code: [200, 202, 204]
    return_content: true
    validate_certs: "{{ vault_validate_certs }}"
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ vault_token }}"
    body: { "data": { "path": "{{ item.path }}", "fencing": "{{ item.fencing}}" }}
  loop: "{{ roles }}"